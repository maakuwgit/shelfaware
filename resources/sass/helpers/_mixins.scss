/**
 * Mixins
 */

/**
 * Font size mixin
 *
 * Example uses:
 *
 * Number:
 * @include font-size(14);
 * Converts font-size number to px and rem units
 *
 * Map:
 @ @include font-size($h1-font-sizes)
 * Sets font-size values (and optionally line-height values)
 * for each breakpoint value
 */
@mixin font-size($map, $breaks: $breakpoints) {
  // If only number is passed
  @if type-of($map) == "number" {
    @include make-font-size($map);
  }
  @else {
    @each $break, $font-size in $map {
      @if $break == null {
        @include make-font-size($font-size);
      }
      @else {
        // If $font-size is a key that exists in
        // $breaks, use the value
        @if map-has-key($breaks, $break) {
          $break: map-get($breaks, $break);
        }
        @media (max-width: $break) {
          @include make-font-size($font-size);
        }
      }
    }
  }
}

/**
 * Utility function for mixin font-size
 */
@mixin make-font-size($font-size) {
  // If $font-size is a list, include both font-size and line-height
  @if type-of($font-size) == "list" {
    // font-size and line-height vars
    $size: nth($font-size, 1);
    $height: nth($font-size, 2);
    // set the sizes
    font-size: $size + px;
    font-size: ($size / 10) + rem;
    @if (length($font-size) > 1) {
      line-height: $height;
    }
  }
  // If is number
  @else if type-of($font-size) == "number" {
    font-size: ($font-size) + px;
    font-size: ($font-size / 10) + rem;
  }
}

/**
 * Flexi-box an element
 */
@mixin flexible($justify: center, $align-items: flex-start, $direction: row, $align-content: center) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: wrap;
  justify-content: $justify;
  align-content: $align-content;
  align-items: $align-items;
}

// Centered container element
@mixin container-fixed($max-width: $container-width) {
  position: relative;
  z-index: 1;
  margin: auto;
  width: 100%;
  max-width: $max-width;
}

/**
 * Input Effects
 * Handles hover effects and such. Externalized so it can
 * be applied to components as well
 */
@mixin input_effects {
  border-color: $white;
  border-radius: rem-calc(4);
  outline: none;
}

/**
 * Input styles
 */
@mixin input_base {
  display: inline-block;
  width: 100%;
  margin-top: $padding-xsmall * 0.75;
  margin-bottom: $padding-xsmall * 0.75;
  padding: #{rem-calc(16)}
           #{rem-calc(16)}
           #{rem-calc(14)}
           #{rem-calc(16)};
  border: 4px solid $midnight;
  border-radius: rem-calc(8);
  font-size: rem-calc(16);
  color: $ebony;
  appearance: none;
  -webkit-appearance: none;
  background-color: $white;

  @include screen-lg-up {

    &:hover {
      cursor: pointer;
      @include input_effects;
    }

  }

  &:focus {
    @include input_effects;
  }
}

@mixin slider-bar-wrapper {
  position: relative;
  -webkit-appearance: none;
  appearance: none;
  width: calc(100% - #{$padding-small * 2});
  height: rem-calc(113);
  margin-left: auto;
  margin-right: auto;
  padding-left: rem-calc(58);
  padding-right: rem-calc(64);
  border-radius: rem-calc(4);
  background-color: $white;
  box-shadow: 0 #{rem-calc(4)} #{rem-calc(10)} 0 rgba($black, 0.4);

  @include screen-md-up {
    max-width: rem-calc(743);/*Dev Note: using rems here so it scales on xxl*/
    width: calc(66.666667% - #{$padding-small * 2});
  }
}

@mixin slider-bar {
  height: rem-calc(2);
  margin-top: rem-calc(56.5);
  z-index: 0;
  background: linear-gradient(to right, rgba(172,172,229,0) 0%,
                                        rgba(172,172,229,1) 10%,
                                        rgba(172,172,229,1) 90%,rgba(172,172,229,0) 100%);
}

@mixin slider-thumb {
  position: relative;
  -webkit-appearance: none;
  appearance: none;
  height: rem-calc(11);
  width: rem-calc(11);
  border-radius: 200px;
  border: none;
  z-index: 1;
  background: linear-gradient(45deg, $cerulean 0%, $turquoise 100%);
}

/**
 * Background opacity
 */
@mixin bg-opacity($color, $opacity: 0.3) {
  background: $color; /* The Fallback */
  background: rgba($color, $opacity);
}

/**
 * Placeholders
 */
@mixin placeholder-text {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }
  &::-moz-placeholder {  /* Firefox 19+ */
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}




/**
 * Breakpoints
 */
@mixin screen-xxl {
  @media (max-width: $screen-xxl-maximum) {
    @content;
  }
}

@mixin screen-xxl-up {
  @media (min-width: $screen-xxl) {
    @content;
  }
}

@mixin screen-xl {
  @media (max-width: $screen-xl-maximum) {
    @content;
  }
}

@mixin screen-xl-up {
  @media (min-width: $screen-xl) {
    @content;
  }
}

@mixin screen-xl-only {
  @media (min-width: $screen-xl) and (max-width: $screen-xxl-maximum) {
    @content;
  }
}

@mixin screen-lg {
  @media (max-width: $screen-lg-maximum) {
    @content;
  }
}

@mixin screen-lg-up {
  @media (min-width: $screen-lg) {
    @content;
  }
}

@mixin screen-lg-only {
  @media (min-width: $screen-lg) and (max-width: $screen-xl-maximum) {
    @content;
  }
}

@mixin screen-md {
  @media (max-width: $screen-md-maximum) {
    @content;
  }
}

@mixin screen-md-up {
  @media (min-width: $screen-md) {
    @content;
  }
}

@mixin screen-md-only {
  @media (min-width: $screen-md) and (max-width: $screen-lg-maximum) {
    @content;
  }
}

@mixin screen-sm {
  @media (max-width: $screen-sm-maximum) {
    @content;
  }
}

@mixin screen-sm-up {
  @media (min-width: $screen-sm) {
    @content;
  }
}

@mixin screen-sm-only {
  @media (min-width: $screen-sm) and (max-width: $screen-md-maximum) {
    @content;
  }
}

@mixin screen-xs {
  @media (max-width: $screen-xs-maximum) {
    @content;
  }
}

@mixin screen-xs-up {
  @media (min-width: $screen-xs) {
    @content;
  }
}

@mixin screen-xs-only {
  @media (min-width: $screen-xs) and (max-width: $screen-sm-maximum) {
    @content;
  }
}

@mixin screen-xxs {
  @media (max-width: $screen-xxs-maximum) {
    @content;
  }
}

@mixin screen-xxs-up {
  @media (min-width: $screen-xxs) {
    @content;
  }
}

@mixin screen-xxs-only {
  @media (min-width: $screen-xxs) and (max-width: $screen-xs-maximum) {
    @content;
  }
}

/*Specific to ShelfAware */
@mixin screen-xs-to-lg {
  @media (min-width: $screen-xs) and (max-width: $screen-lg-maximum) {
    @content;
  }
}

@mixin screen-nav-mobile {
  @media (max-width: $screen-nav-mobile) {
    @content;
  }
}
